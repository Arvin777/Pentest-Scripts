from datetime import datetime, timedelta
import re
def parse_ip_deny_entries(file_path):
    # Initialize a dictionary to store deny entries
    deny_entries = {}
    # Define the regex pattern to extract log details
    pattern = re.compile(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) (\d+\.\d+\.\d+\.\d+) (\d+\.\d+\.\d+\.\d+) \d+ (ALLOW|DENY)')
    # Read the file contents
    with open(file_path, 'r') as file:
        lines = file.readlines()
    # Process each line
    for line in lines:
        match = pattern.match(line.strip())
        if match:
            timestamp_str, src_ip, dst_ip, action = match.groups()
            timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
            if action == 'DENY':
                # If the IP is already in the dictionary, check time difference
                if src_ip in deny_entries:
                    last_time = deny_entries[src_ip]
                    if timestamp - last_time > timedelta(minutes=10):
                        # If the difference is more than 10 minutes, update the time
                        deny_entries[src_ip] = timestamp
                    else:
                        # Skip this entry as it falls within the 10-minute threshold
                        continue
                else:
                    # Add the IP and timestamp to the dictionary
                    deny_entries[src_ip] = timestamp
    # Return the IPs that had a deny action within the 30-minute threshold
    return list(deny_entries.keys())
# Path to the log file
file_path = 'logs.log'
# Get the list of IPs with deny condition within the 30-minute threshold
deny_ips = parse_ip_deny_entries(file_path)
print("IPs with DENY condition within 10 minutes threshold:", deny_ips)